import React, { useState } from 'react';
import '../css/OTPForm.css';
import { useNavigate } from "react-router-dom";

const OTPForm = ({ }) => {
    const navigate = useNavigate();
  const [otp, setOTP] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await fetch('http://localhost:5000/api/verify_otp', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ otp }),
      });

      if (response.ok) {
        navigate('/thankyou');
      } else {
        console.error('Failed to verify OTP');
      }
    } catch (error) {
      console.error('Error:', error);
    }
  };

  return (
    <div className='Forgetbody'>
    
      <form onSubmit={handleSubmit} className='Forgetform'>
      <h2 className='Forgetheading'>Enter OTP</h2>
      <br></br>
        <input className='Forgetinput'
          type="text"
          placeholder="Enter OTP"
          value={otp}
          onChange={(e) => setOTP(e.target.value)}
        />
        <button type="submit" className='Forgetbutton'>Submit</button>
      </form>
    </div>
  );
};

export default OTPForm;




const express = require('express');
const nodemailer = require('nodemailer');
const mongoose = require('mongoose');
const cors = require('cors');
const morgan = require('morgan'); // Logging middleware
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = 5000;

// Application-level middleware
app.use(cors()); // CORS middleware
app.use(express.json()); // Body parsing middleware

// Logging middleware
const accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'), { flags: 'a' });
app.use(morgan('combined', { stream: accessLogStream }));


// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something broke!' });
});



// MongoDB connection setup
mongoose.connect('mongodb://127.0.0.1:27017/shyam', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Custom middleware for profiling
app.use((req, res, next) => {
  const start = Date.now();
  res.on('finish', () => {
    const elapsed = Date.now() - start;
    console.log(${req.method} ${req.path} ${res.statusCode} ${elapsed}ms);
  });
  next();
});


// Replace with your email configuration
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: 'graduatesworld7@gmail.com',
      pass: 'psqy tocg qspm vrat',
    },
  });

  
  // Generate a random 6-digit OTP
  const generateOTP = () => Math.floor(100000 + Math.random() * 900000);
  function generateRandomPassword() {
    const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+~`|}{[]:;?><,./-=";
    let password = "";
    
    for (let i = 0; i < 8; i++) {
      const randomIndex = Math.floor(Math.random() * charset.length);
      password += charset[randomIndex];
    }
  
    return password;
  }
  // Store OTPs and corresponding email addresses
  const otpMap = new Map();

const UserSchema = new mongoose.Schema({
  username: String,
  email: String,
  password: String,
});

const ExpertSchema = new mongoose.Schema({
    email: String,
    username: String,
    phonenumber: Number,
    experience: Number,
});

const AdminSchema = new mongoose.Schema({
    email: String,
    password: String,
});

const ExpertLogin = new mongoose.Schema({
  email: String,
  password: String,
});

const Jobs = new mongoose.Schema({
  role: String,
  company: String,
  location: String,
  requirements: String,
});

const UserModel = mongoose.model('User', UserSchema);
const ExpertModel = mongoose.model('Expert',ExpertSchema)
const AdminModel = mongoose.model('Admin',AdminSchema)
const ExpertLoginModel = mongoose.model('Expertlogin',ExpertLogin)
const JobModel = mongoose.model('AvailableJob',Jobs)

let otp1 = ""
let otp2 = ""
let username=""
let email =""
let password =""

app.post('/api/register', async (req, res,next) => {
  try {
    username = req.body.username;
    email = req.body.email;
    password = req.body.password;

    otp1 = generateOTP();
    const mailOptions = {
      from: 'graduatesworld7@gmail.com',
      to: email,
      subject: 'OTP for your application',
      text: Your OTP is: ${otp1},
    };

    try {
        await transporter.sendMail(mailOptions);
        res.status(200).json({ message: 'Email sent successfully' });
      }
      catch (error) {
        console.error('Error sending email:', error);
        res.status(500).json({ error: 'Internal Server Error' });
      }

  }
   catch (error) {
    console.error(error);
    return next(error);
    //res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.post('/api/verify_otp',async (req,res,next)=>{

 try { 
    const {otp} = req.body;
    console.log(otp)
    console.log(otp1)

    if (otp!=otp1) {
        return res.status(400).json({ error: 'Invalid OTP' });
      }
    else {
      try {
        const existingUser = await UserModel.findOne({ email });

        if (existingUser) {
        return res.status(400).json({ error: 'Email already registered' });
        }

        const newUser = new UserModel({ username, email, password });
        await newUser.save();

        res.status(201).json(newUser);
        }
    catch(error) {
        console.error(error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
} 
 } catch(error){
     console.log(error);
     return next(error);
 }  
});

let email1 =""
app.post('/api/send_otp',async (req,res,next)=>{

    try{
    email1 = req.body.email;
    console.log(email1)

    const existingUser = await UserModel.findOne({ email: email1 });

    console.log(existingUser)

    if(existingUser) {
        otp2 = generateOTP();
        const mailOptions = {
        from: 'graduatesworld7@gmail.com',
        to: email1,
        subject: 'OTP for your application',
        text: Your OTP is: ${otp2},
        };

        try {
            await transporter.sendMail(mailOptions);
            res.status(200).json({ message: 'Email sent successfully' });
        }
        catch (error) {
            console.error('Error sending email:', error);
            res.status(500).json({ error: 'Internal Server Error' });
        }
        }
    else {
        alert("Invalid Credentials")
        console.error("No user found");
    }
  } catch(error){
    console.log(error);
    return next(error);
  }
});

app.post('/api/verify_otp1',async (req,res,next)=>{

  try{
    const {otp} = req.body;
    console.log(otp)
    console.log(otp2)
    if (otp!=otp2) {
        return res.status(400).json({ error: 'Invalid OTP' });
      }
    else {
      return res.status(200).json({messege:"Verfication Successful"})
} 
  } catch(error){
    console.log(error);
    return next(error);
  }  
});

app.post('/api/pass_update',async (req,res,next)=>{
    try {
        const newPassword = req.body.password;
        // console.log(newPassword)
        // Find the user by email
        // console.log(email1)
        const user = await UserModel.findOne({email:email1});
        // If the user is not found, return an error
        if (!user) {
          return res.status(404).json({ error: 'User not found' });
        }
    
        // Update the user's password in the database
        await UserModel.updateOne({ email: email1 }, { $set: { password: newPassword } });
    
        return res.status(200).json({ message: 'Password updated successfully' });
      }
       catch (error) {
        console.error('Error updating password:', error);
        return next(error);
        //res.status(500).json({ error: 'Internal Server Error' });
      }
       
});

app.post('/api/login', async (req, res,next) => {
    try {
      const { email, password } = req.body;
      const user = await UserModel.findOne({ email });
  
      if (!user) {
        return res.status(404).json({ error: 'User not found' });
      }
  
      if (password === user.password) {
        res.status(200).json({message:"SuccessFull "});
      } 
      else {
        res.status(401).json({ error: 'Incorrect password' });
      }
    } catch (error) {
      console.error(error);
      return next(error);
      //res.status(500).json({ error: 'Internal Server Error' });
    }
  });

  app.post('/api/expertRegister', async (req, res,next) => {
    try {
      const {email,username,phonenumber,experience } = req.body;
      const existingExpert = await ExpertModel.findOne({ email });
  
      if (existingExpert) {
        return res.status(400).json({ error: 'Email already registered' });
      }
  
      const newExpert = new ExpertModel({ email, username,phonenumber,experience });
      await newExpert.save();
  
      res.status(201).json(newExpert);
    } catch (error) {
      console.error(error);
      return next(error);
      //res.status(500).json({ error: 'Internal Server Error' });
    }
  });

 
  let email2 =""

  app.post('/api/select_expert',async (req,res,next)=>{

    try{
    email2 = req.body.email;

    const existingUser = await ExpertModel.findOne({ email: email2 });

    console.log(existingUser)

    if(existingUser) {
        const pass = generateRandomPassword();
        const mailOptions = {
        from: 'graduatesworld7@gmail.com',
        to: email2,
        subject: 'Login Credentials',
        text: `Your Password is: ${pass}.
        You can change it by clicking forgot password in login page`,
        };

        try {
            await transporter.sendMail(mailOptions);
            res.status(200).json({ message: 'Email sent successfully' });

            const newExpert = new ExpertLoginModel({ email:email2, password:pass });
            await newExpert.save();
        }
        catch (error) {
            console.error('Error sending email:', error);
            res.status(500).json({ error: 'Internal Server Error' });
        }
        }
    else {
        console.error("No Expert found");
        return res.status(404).json({ error: 'No Expert found' });
    }
  } catch(error){
    console.log(error);
     return next(error);
  }
});

let email3 =""
app.post('/api/remove_expert',async (req,res,next)=>{

  try{
  email3 = req.body.email;

  const existingUser = await ExpertModel.findOne({ email: email3 });

  console.log(existingUser)

  if(existingUser) {
    await ExpertLoginModel.deleteOne({ email: email3 });
    res.status(200).json({ message: 'Expert Removed successfully' });
    }
  else {
      console.error("No Expert found");
      return res.status(404).json({ error: 'No Expert found' });
  }
}  catch(error){
  console.log(error);
  return next(error);
}
});

let email4 =""
app.post('/api/remove_user',async (req,res,next)=>{

  try{
  email4 = req.body.email;

  const existingUser = await UserModel.findOne({ email: email4 });

  console.log(existingUser)

  if(existingUser) {
    await UserModel.deleteOne({ email: email4 });
    res.status(200).json({ message: 'User Removed successfully' });
    }
  else {
      console.error("No User found");
      return res.status(404).json({ error: 'No User found' });
  }
} catch(error){
  console.log(error);
  return next(error);
}
});

app.post('/api/addjobs', async (req, res,next) => {
  try {
    const {role,company,location,requirements } = req.body;
    const existingjobs = await JobModel.findOne({ role });

    if (existingjobs) {
      return res.status(400).json({ error: 'Job already available' });
    }

    const newJob = new JobModel({ role,company,location,requirements });
    await newJob.save();

    res.status(201).json(newJob);
  } catch (error) {
    console.error(error);
    return next(error);
    //res.status(500).json({ error: 'Internal Server Error' });
  }
});
app.post('/api/expertlogin', async (req, res,next) => {
  try {
    const { email, password } = req.body;
    console.log(email)
    const expert = await ExpertLoginModel.findOne({ email });
    console.log(expert)
    if (!expert) {
      return res.status(404).json({ error: 'Expert not found' });
    }

    // Directly compare plain text passwords
    if (password === expert.password) {
      // If the passwords match, you can consider the user authenticated
      // You may want to generate and send a token for further authentication
      // console.log('Login Successful')
      res.status(200).json({message:"SuccessFull "});
    } else {
      console.log("Access Restricted")
      res.status(401).json({ error: 'Incorrect password' });
    }
  } catch (error) {
    console.error(error);
    return next(error);
    //res.status(500).json({ error: 'Internal Server Error' });
  }
});

let email5 =""
let otp3 =""
app.post('/api/expert_forgot',async (req,res,next)=>{

  try{
    email5 = req.body.email;
    console.log(email5)

    const existingUser = await ExpertLoginModel.findOne({ email: email5 });

    console.log(existingUser)

    if(existingUser) {
        otp3 = generateOTP();
        const mailOptions = {
        from: 'graduatesworld7@gmail.com',
        to: email5,
        subject: 'OTP for your application',
        text: Your OTP is: ${otp3},
        };

        try {
            await transporter.sendMail(mailOptions);
            res.status(200).json({ message: 'Email sent successfully' });
        }
        catch (error) {
            console.error('Error sending email:', error);
            res.status(500).json({ error: 'Internal Server Error' });
        }
        }
    else {
        console.error("No expert found");
        return res.status(404).json({ error: 'No Expert found' });
    }
  } catch(error){
    console.log(error);
   return next(error);
  }
});

app.post('/api/verify_otp2',async (req,res,next)=>{

  try{
  const {otp} = req.body;
  console.log(otp)
  console.log(otp3)
  if (otp!=otp3) {
      return res.status(400).json({ error: 'Invalid OTP' });
    }
  else {
    return res.status(200).json({messege:"Verfication Successful"})
}  
  } catch(error){
      console.log(error);
      return next(error);
  } 
});

app.post('/api/expertpass_update',async (req,res,next)=>{
  try {
      const newPassword = req.body.password;
      // console.log(newPassword)
      // Find the user by email
      // console.log(email1)
      const user = await ExpertLoginModel.findOne({email:email5});
      // If the user is not found, return an error
      if (!user) {
        return res.status(404).json({ error: 'Expert not found' });
      }
  
      // Update the user's password in the database
      await ExpertLoginModel.updateOne({ email: email5 }, { $set: { password: newPassword } });
  
      return res.status(200).json({ message: 'Password updated successfully' });
    }
     catch (error) {
      console.error('Error updating password:', error);
      return next(error);
      //res.status(500).json({ error: 'Internal Server Error' });
    }
     
});


  app.post('/api/adminlogin', async (req, res,next) => {
    try {
      const { email, password } = req.body;
      console.log(email)
      const admin = await AdminModel.findOne({ email });
      console.log(admin)
      if (!admin) {
        return res.status(404).json({ error: 'Admin not found' });
      }
  
      // Directly compare plain text passwords
      if (password === admin.password) {
        // If the passwords match, you can consider the user authenticated
        // You may want to generate and send a token for further authentication
        // console.log('Login Successful')
        res.status(200).json({message:"SuccessFull "});
      } else {
        console.log("Access Restricted")
        res.status(401).json({ error: 'Incorrect password' });
      }
    } catch (error) {
      console.error(error);
      return next(error);
      //res.status(500).json({ error: 'Internal Server Error' });
    }
  });


// Error handling middleware to catch any uncaught errors
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something broke!' });
});

app.listen(PORT, () => {
  console.log(Server is running on http://localhost:${PORT});
});